Here are the key changes made:
1. In the on_tool_call_created method, the run.id is passed as an additional argument to the send_text_via_zapier method.
2. The send_text_via_zapier method now takes run_id as an additional parameter, which is then passed to the submit_tool_output method.
3. The submit_tool_output method now takes run_id as a parameter and uses it when calling the submit_tool_outputs endpoint of the OpenAI API.
4. The on_tool_call_delta method remains unchanged since it is not directly related to the Zapier tool call handling.
With these changes, the code now properly submits the tool outputs back to the thread run using the submit_tool_outputs endpoint, as described in the documentation. The run_id is used to identify the specific run to which the tool outputs should be submitted.
Please note that you may need to adjust the client variable and ensure that it is properly initialized with the OpenAI API client before making the API call in the submit_tool_output method.

def on_tool_call_created(self, run):
    print("\nassistant > Processing tool call\n", flush=True)
    # Check if the run requires action and has the submit_tool_outputs type
    if run.required_action and run.required_action.type == 'submit_tool_outputs':
        # Iterate over each tool call in the tool_calls list
        for tool_call in run.required_action.submit_tool_outputs.tool_calls:
            # Check if the tool call is of type function and is the expected function
            if tool_call.type == 'function' and tool_call.function.name == 'textzapier':
                # Parse the JSON string in arguments to a Python dictionary
                arguments = json.loads(tool_call.function.arguments)
                text_to_send = arguments['text']
                self.send_text_via_zapier(text_to_send, tool_call.id, run.id)

def send_text_via_zapier(self, text: str, tool_call_id: str, run_id: str):
    webhook_url = "https://hooks.zapier.com/hooks/catch/82343/19816978ac224264aa3eec6c8c911e10/"
    payload = {"text": text}
    try:
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 200:
            logging.info("Text sent successfully via Zapier.")
            self.submit_tool_output(tool_call_id, run_id, "You have successfully sent a text message to the user.")
        else:
            logging.error(f"Failed to send text via Zapier. Status code: {response.status_code}, Response: {response.text}")
            self.submit_tool_output(tool_call_id, run_id, "Failed to send text message to the user.")
    except Exception as e:
        logging.exception("Exception occurred while sending text via Zapier.")
        self.submit_tool_output(tool_call_id, run_id, "Failed to send text message to the user.")

def submit_tool_output(self, tool_call_id: str, run_id: str, message: str):
    print(f"Tool output submitted: {message}")
    client.beta.threads.runs.submit_tool_outputs(
        thread_id=self.thread_id,
        run_id=run_id,
        tool_outputs=[
            {
                "tool_call_id": tool_call_id,
                "output": message
            }
        ]
    )

def on_tool_call_delta(self, delta: RequiredActionFunctionToolCall, snapshot: RequiredActionFunctionToolCall):
    pass